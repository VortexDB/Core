// Generated by Haxe 4.0.0-preview.4+1e3e5e016
package utest;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Assert extends haxe.lang.HxObject
{
	static
	{
		//line 706 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.createAsync = ( (( utest.Assert_Anon_706__Fun.__hx_current != null )) ? (utest.Assert_Anon_706__Fun.__hx_current) : (utest.Assert_Anon_706__Fun.__hx_current = ((utest.Assert_Anon_706__Fun) (new utest.Assert_Anon_706__Fun()) )) );
		//line 718 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.createEvent = ( (( utest.Assert_Anon_718__Fun.__hx_current != null )) ? (utest.Assert_Anon_718__Fun.__hx_current) : (utest.Assert_Anon_718__Fun.__hx_current = ((utest.Assert_Anon_718__Fun) (new utest.Assert_Anon_718__Fun()) )) );
	}
	
	public Assert(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Assert()
	{
		//line 20 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.__hx_ctor_utest_Assert(this);
	}
	
	
	protected static void __hx_ctor_utest_Assert(utest.Assert __hx_this)
	{
	}
	
	
	public static haxe.ds.List<utest.Assertation> results;
	
	public static void isTrue(boolean cond, java.lang.String msg, java.lang.Object pos)
	{
		//line 35 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( utest.Assert.results == null )) 
		{
			//line 35 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			throw haxe.lang.HaxeException.wrap("Assert.results is not currently bound to any assert context");
		}
		
		//line 36 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( null == msg )) 
		{
			//line 37 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = "expected true";
		}
		
		//line 38 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (cond) 
		{
			//line 39 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.results.add(utest.Assertation.Success(pos));
		}
		else
		{
			//line 41 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.results.add(utest.Assertation.Failure(msg, pos));
		}
		
	}
	
	
	public static void isFalse(boolean value, java.lang.String msg, java.lang.Object pos)
	{
		//line 52 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( null == msg )) 
		{
			//line 53 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = "expected false";
		}
		
		//line 54 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(( value == false ), msg, pos);
	}
	
	
	public static void isNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 65 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 66 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = ( "expected null but it is " + utest.Assert.q(value) );
		}
		
		//line 67 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(( value == null ), msg, pos);
	}
	
	
	public static void notNull(java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 78 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( null == msg )) 
		{
			//line 79 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = "expected not null";
		}
		
		//line 80 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(( ! (( value == null )) ), msg, pos);
	}
	
	
	public static void is(java.lang.Object value, java.lang.Object type, java.lang.String msg, java.lang.Object pos)
	{
		//line 92 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 92 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = ( ( ( "expected type " + utest.Assert.typeToString(type) ) + " but it is " ) + utest.Assert.typeToString(value) );
		}
		
		//line 93 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(haxe.root.Std.is(value, type), msg, pos);
	}
	
	
	public static void notEquals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 108 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 108 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = ( ( ( ( "expected " + utest.Assert.q(expected) ) + " and test value " ) + utest.Assert.q(value) ) + " should be different" );
		}
		
		//line 109 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isFalse(haxe.lang.Runtime.eq(expected, value), msg, pos);
	}
	
	
	public static void equals(java.lang.Object expected, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 124 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 124 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) );
		}
		
		//line 125 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(haxe.lang.Runtime.eq(expected, value), msg, pos);
	}
	
	
	public static void match(haxe.root.EReg pattern, java.lang.Object value, java.lang.String msg, java.lang.Object pos)
	{
		//line 140 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 140 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = ( ( "the value " + utest.Assert.q(value) ) + " does not match the provided pattern" );
		}
		
		//line 141 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(pattern.match(haxe.lang.Runtime.toString(value)), msg, pos);
	}
	
	
	public static void floatEquals(double expected, double value, java.lang.Object approx, java.lang.String msg, java.lang.Object pos)
	{
		//line 158 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 158 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) );
		}
		
		//line 159 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(utest.Assert._floatEquals(expected, value, approx), msg, pos);
		//line 159 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		return ;
	}
	
	
	public static boolean _floatEquals(double expected, double value, java.lang.Object approx)
	{
		//line 164 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (java.lang.Double.isNaN(expected)) 
		{
			//line 165 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return java.lang.Double.isNaN(value);
		}
		else
		{
			//line 166 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			if (java.lang.Double.isNaN(value)) 
			{
				//line 167 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return false;
			}
			else
			{
				//line 168 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if ((  ! (haxe.lang.Runtime.isFinite(expected))  &&  ! (haxe.lang.Runtime.isFinite(value))  )) 
				{
					//line 169 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return ( ( expected > 0 ) == ( value > 0 ) );
				}
				
			}
			
		}
		
		//line 170 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (haxe.lang.Runtime.eq(null, approx)) 
		{
			//line 171 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			approx = 1e-5;
		}
		
		//line 172 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		return ( java.lang.Math.abs(( value - expected )) <= ((double) (haxe.lang.Runtime.toDouble(approx)) ) );
	}
	
	
	public static java.lang.String getTypeName(java.lang.Object v)
	{
		//line 176 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(v);
		//line 176 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		switch (_g.index)
		{
			case 0:
			{
				//line 178 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "`null`";
			}
			
			
			case 1:
			{
				//line 179 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "Int";
			}
			
			
			case 2:
			{
				//line 180 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "Float";
			}
			
			
			case 3:
			{
				//line 181 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "Bool";
			}
			
			
			case 4:
			{
				//line 185 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "Object";
			}
			
			
			case 5:
			{
				//line 182 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "function";
			}
			
			
			case 6:
			{
				//line 183 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.Class c = ((java.lang.Class) (_g.params[0]) );
				//line 183 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return haxe.root.Type.getClassName(c);
			}
			
			
			case 7:
			{
				//line 184 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.Class e = ((java.lang.Class) (_g.params[0]) );
				//line 184 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return haxe.root.Type.getEnumName(e);
			}
			
			
			case 8:
			{
				//line 186 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return "`Unknown`";
			}
			
			
		}
		
		//line 175 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		return null;
	}
	
	
	public static boolean isIterable(java.lang.Object v, boolean isAnonym)
	{
		//line 191 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		haxe.root.Array<java.lang.String> fields = ( (isAnonym) ? (haxe.root.Reflect.fields(v)) : (haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (v) ))) ))) );
		//line 192 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("iterator"))) ))) ) 
		{
			//line 192 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return false;
		}
		
		//line 193 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		return haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "iterator", false));
	}
	
	
	public static boolean isIterator(java.lang.Object v, boolean isAnonym)
	{
		//line 197 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		haxe.root.Array<java.lang.String> fields = ( (isAnonym) ? (haxe.root.Reflect.fields(v)) : (haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (v) ))) ))) );
		//line 198 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if ((  ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("next"))) )))  ||  ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (fields) ), haxe.lang.Runtime.toString("hasNext"))) )))  )) 
		{
			//line 198 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return false;
		}
		
		//line 199 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "next", false))) 
		{
			//line 199 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return haxe.root.Reflect.isFunction(haxe.lang.Runtime.getField(v, "hasNext", false));
		}
		else
		{
			//line 199 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return false;
		}
		
	}
	
	
	public static boolean sameAs(java.lang.Object expected, java.lang.Object value, java.lang.Object status, double approx)
	{
		//line 203 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		java.lang.String texpected = utest.Assert.getTypeName(expected);
		//line 204 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		java.lang.String tvalue = utest.Assert.getTypeName(value);
		//line 206 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if ((  ! (haxe.lang.Runtime.valEq(texpected, tvalue))  &&  ! ((( ( haxe.lang.Runtime.valEq(texpected, "Int") && haxe.lang.Runtime.valEq(tvalue, "Float") ) || ( haxe.lang.Runtime.valEq(texpected, "Float") && haxe.lang.Runtime.valEq(tvalue, "Int") ) )))  )) 
		{
			//line 208 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected type " + texpected ) + " but it is " ) + tvalue ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
			//line 209 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return false;
		}
		
		//line 211 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		haxe.root.ValueType _g = haxe.root.Type.typeof(expected);
		//line 211 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		switch (_g.index)
		{
			case 1:
			case 2:
			{
				//line 214 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if ( ! (utest.Assert._floatEquals(((double) (haxe.lang.Runtime.toDouble(expected)) ), ((double) (haxe.lang.Runtime.toDouble(value)) ), approx)) ) 
				{
					//line 216 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 217 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return false;
				}
				
				//line 219 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return true;
			}
			
			
			case 0:
			case 3:
			{
				//line 221 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( ! (haxe.lang.Runtime.eq(expected, value)) )) 
				{
					//line 222 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 223 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return false;
				}
				
				//line 225 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return true;
			}
			
			
			case 4:
			{
				//line 414 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
				{
					//line 415 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.root.Array<java.lang.String> tfields = haxe.root.Reflect.fields(value);
					//line 416 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.root.Array<java.lang.String> fields = haxe.root.Reflect.fields(expected);
					//line 417 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					java.lang.String path = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 418 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					{
						//line 418 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						int _g1 = 0;
						//line 418 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						while (( _g1 < fields.length ))
						{
							//line 418 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.String field = fields.__get(_g1);
							//line 418 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							 ++ _g1;
							//line 419 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							tfields.remove(field);
							//line 420 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path, "")) ? (field) : (( ( path + "." ) + field )) ));
							//line 421 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if ( ! (haxe.root.Reflect.hasField(value, field)) ) 
							{
								//line 422 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "error", ( ( ( "expected field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) ) + " does not exist in " ) + utest.Assert.q(value) ));
								//line 423 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								return false;
							}
							
							//line 425 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.Object e = haxe.root.Reflect.field(expected, field);
							//line 426 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if (haxe.root.Reflect.isFunction(e)) 
							{
								//line 427 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								continue;
							}
							
							//line 428 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.Object v = haxe.root.Reflect.field(value, field);
							//line 429 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if ( ! (utest.Assert.sameAs(e, v, status, approx)) ) 
							{
								//line 430 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								return false;
							}
							
						}
						
					}
					
					//line 432 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( tfields.length > 0 )) 
					{
						//line 434 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( "the tested object has extra field(s) (" + tfields.join(", ") ) + ") not included in the expected ones" ));
						//line 435 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return false;
					}
					
				}
				
				//line 440 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (utest.Assert.isIterator(expected, true)) 
				{
					//line 441 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if ( ! (utest.Assert.isIterator(value, true)) ) 
					{
						//line 442 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( "expected Iterable but it is not " + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 443 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return false;
					}
					
					//line 445 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 446 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.Object __temp_stmt6 = null;
						//line 446 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 446 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Function __temp_odecl1 = new utest.Assert_sameAs_446__Fun(expected);
							//line 446 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							__temp_stmt6 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl1}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 446 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array __temp_stmt5 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt6) ));
						//line 446 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array evalues = ((haxe.root.Array) (__temp_stmt5) );
						//line 447 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.Object __temp_stmt8 = null;
						//line 447 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 447 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Function __temp_odecl2 = new utest.Assert_sameAs_447__Fun(value);
							//line 447 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							__temp_stmt8 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl2}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 447 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array __temp_stmt7 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt8) ));
						//line 447 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array vvalues = ((haxe.root.Array) (__temp_stmt7) );
						//line 448 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( evalues.length != vvalues.length )) 
						{
							//line 449 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues.length ) + " values in Iterator but they are " ) + vvalues.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 450 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 452 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.String path1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 453 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 453 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g11 = 0;
							//line 453 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g2 = evalues.length;
							//line 453 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g11 < _g2 ))
							{
								//line 453 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								int i = _g11++;
								//line 454 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path1, "")) ? (( ( "iterator[" + i ) + "]" )) : (( ( ( path1 + "[" ) + i ) + "]" )) ));
								//line 455 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues.__get(i), vvalues.__get(i), status, approx)) ) 
								{
									//line 457 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 458 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 462 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 466 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (utest.Assert.isIterable(expected, true)) 
				{
					//line 467 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if ( ! (utest.Assert.isIterable(value, true)) ) 
					{
						//line 468 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( "expected Iterator but it is not " + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 469 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return false;
					}
					
					//line 471 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 472 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array evalues1 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (expected) ))) );
						//line 473 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array vvalues1 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (value) ))) );
						//line 474 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( evalues1.length != vvalues1.length )) 
						{
							//line 475 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues1.length ) + " values in Iterable but they are " ) + vvalues1.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 476 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 478 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.String path2 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 479 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 479 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g12 = 0;
							//line 479 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g3 = evalues1.length;
							//line 479 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g12 < _g3 ))
							{
								//line 479 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								int i1 = _g12++;
								//line 480 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path2, "")) ? (( ( "iterable[" + i1 ) + "]" )) : (( ( ( path2 + "[" ) + i1 ) + "]" )) ));
								//line 481 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues1.__get(i1), vvalues1.__get(i1), status, approx)) ) 
								{
									//line 482 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 485 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 487 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return true;
			}
			
			
			case 5:
			{
				//line 227 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if ( ! (haxe.root.Reflect.compareMethods(expected, value)) ) 
				{
					//line 229 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( "expected same function reference" + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 230 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return false;
				}
				
				//line 232 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return true;
			}
			
			
			case 6:
			{
				//line 233 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.Class c = ((java.lang.Class) (_g.params[0]) );
				//line 234 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.String cexpected = haxe.root.Type.getClassName(c);
				//line 235 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.String cvalue = haxe.root.Type.getClassName(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (value) ))) ));
				//line 241 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(cexpected, cvalue)) ) 
				{
					//line 243 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected instance of " + utest.Assert.q(cexpected) ) + " but it is " ) + utest.Assert.q(cvalue) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 244 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return false;
				}
				
				//line 248 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( expected instanceof java.lang.String )) 
				{
					//line 249 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (haxe.lang.Runtime.eq(expected, value)) 
					{
						//line 250 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return true;
					}
					else
					{
						//line 252 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected string \'" + haxe.root.Std.string(expected) ) + "\' but it is \'" ) + haxe.root.Std.string(value) ) + "\'" ));
						//line 253 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return false;
					}
					
				}
				
				//line 258 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( expected instanceof haxe.root.Array )) 
				{
					//line 259 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 260 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( ! (haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(expected, "length", true), haxe.lang.Runtime.getField(value, "length", true))) )) 
						{
							//line 261 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + haxe.root.Std.string(haxe.lang.Runtime.getField(expected, "length", true)) ) + " elements but they are " ) + haxe.root.Std.string(haxe.lang.Runtime.getField(value, "length", true)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 262 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 264 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.String path3 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 265 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 265 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g13 = 0;
							//line 265 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g4 = ((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(expected, "length", true))) );
							//line 265 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g13 < _g4 ))
							{
								//line 265 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								int i2 = _g13++;
								//line 266 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path3, "")) ? (( ( "array[" + i2 ) + "]" )) : (( ( ( path3 + "[" ) + i2 ) + "]" )) ));
								//line 267 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if ( ! (utest.Assert.sameAs(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new java.lang.Object[]{i2})) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new java.lang.Object[]{i2})) ), status, approx)) ) 
								{
									//line 269 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( ( ( "expected array element at [" + i2 ) + "] to be " ) + utest.Assert.q(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "__get", new java.lang.Object[]{i2})) )) ) + " but it is " ) + utest.Assert.q(((java.lang.Object) (haxe.lang.Runtime.callField(value, "__get", new java.lang.Object[]{i2})) )) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 270 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 274 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 278 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( expected instanceof haxe.root.Date )) 
				{
					//line 279 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( ! (haxe.lang.Runtime.eq(((java.lang.Object) (haxe.lang.Runtime.callField(expected, "getTime", null)) ), ((java.lang.Object) (haxe.lang.Runtime.callField(value, "getTime", null)) ))) )) 
					{
						//line 280 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 281 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return false;
					}
					
					//line 283 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 287 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( expected instanceof haxe.io.Bytes )) 
				{
					//line 288 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 289 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.io.Bytes ebytes = ((haxe.io.Bytes) (expected) );
						//line 290 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.io.Bytes vbytes = ((haxe.io.Bytes) (value) );
						//line 291 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( ebytes.length != vbytes.length )) 
						{
							//line 291 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 292 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 292 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g14 = 0;
							//line 292 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g5 = ebytes.length;
							//line 292 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g14 < _g5 ))
							{
								//line 292 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								int i3 = _g14++;
								//line 293 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if (( (( ebytes.b[i3] & 255 )) != (( vbytes.b[i3] & 255 )) )) 
								{
									//line 295 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected byte " + (( ebytes.b[i3] & 255 )) ) + " but it is " ) + (( vbytes.b[i3] & 255 )) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 296 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 299 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 303 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( expected instanceof haxe.IMap )) 
				{
					//line 304 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 305 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.IMap map = ((haxe.IMap) (expected) );
						//line 306 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.IMap vmap = ((haxe.IMap) (value) );
						//line 307 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array _g6 = new haxe.root.Array(new java.lang.Object[]{});
						//line 307 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 307 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.Object k = map.keys();
							//line 307 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(k, "hasNext", null)) )))
							{
								//line 307 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								java.lang.Object k1 = ((java.lang.Object) (haxe.lang.Runtime.callField(k, "next", null)) );
								//line 307 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								_g6.push(k1);
							}
							
						}
						
						//line 308 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array _g15 = new haxe.root.Array(new java.lang.Object[]{});
						//line 308 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 308 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.Object k2 = vmap.keys();
							//line 308 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.callField(k2, "hasNext", null)) )))
							{
								//line 308 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								java.lang.Object k3 = ((java.lang.Object) (haxe.lang.Runtime.callField(k2, "next", null)) );
								//line 308 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								_g15.push(k3);
							}
							
						}
						
						//line 310 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( _g6.length != _g15.length )) 
						{
							//line 311 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + _g6.length ) + " keys but they are " ) + _g15.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 312 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 314 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.String path4 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 315 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 315 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g21 = 0;
							//line 315 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g21 < _g6.length ))
							{
								//line 315 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								java.lang.Object key = _g6.__get(_g21);
								//line 315 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								 ++ _g21;
								//line 316 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path4, "")) ? (( ( "hash[" + haxe.root.Std.string(key) ) + "]" )) : (( ( ( path4 + "[" ) + haxe.root.Std.string(key) ) + "]" )) ));
								//line 317 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if ( ! (utest.Assert.sameAs(map.get(key), vmap.get(key), status, approx)) ) 
								{
									//line 319 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 320 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 324 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 328 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (utest.Assert.isIterator(expected, false)) 
				{
					//line 329 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 330 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.Object __temp_stmt10 = null;
						//line 330 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 330 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Function __temp_odecl3 = new utest.Assert_sameAs_330__Fun(expected);
							//line 330 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							__temp_stmt10 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl3}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 330 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array __temp_stmt9 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt10) ));
						//line 330 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array evalues2 = ((haxe.root.Array) (__temp_stmt9) );
						//line 331 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.Object __temp_stmt12 = null;
						//line 331 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 331 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Function __temp_odecl4 = new utest.Assert_sameAs_331__Fun(value);
							//line 331 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							__temp_stmt12 = new haxe.lang.DynamicObject(new java.lang.String[]{"iterator"}, new java.lang.Object[]{__temp_odecl4}, new java.lang.String[]{}, new double[]{});
						}
						
						//line 331 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array __temp_stmt11 = haxe.root.Lambda.array(((java.lang.Object) (__temp_stmt12) ));
						//line 331 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array vvalues2 = ((haxe.root.Array) (__temp_stmt11) );
						//line 332 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( evalues2.length != vvalues2.length )) 
						{
							//line 333 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues2.length ) + " values in Iterator but they are " ) + vvalues2.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 334 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 336 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.String path5 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 337 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 337 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g16 = 0;
							//line 337 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g7 = evalues2.length;
							//line 337 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g16 < _g7 ))
							{
								//line 337 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								int i4 = _g16++;
								//line 338 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path5, "")) ? (( ( "iterator[" + i4 ) + "]" )) : (( ( ( path5 + "[" ) + i4 ) + "]" )) ));
								//line 339 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues2.__get(i4), vvalues2.__get(i4), status, approx)) ) 
								{
									//line 341 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
									//line 342 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 346 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 350 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (utest.Assert.isIterable(expected, false)) 
				{
					//line 351 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
					{
						//line 352 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array evalues3 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (expected) ))) );
						//line 353 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.root.Array vvalues3 = ((haxe.root.Array) (haxe.root.Lambda.array(((java.lang.Object) (value) ))) );
						//line 354 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( evalues3.length != vvalues3.length )) 
						{
							//line 355 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected " + evalues3.length ) + " values in Iterable but they are " ) + vvalues3.length ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
							//line 356 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							return false;
						}
						
						//line 358 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						java.lang.String path6 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
						//line 359 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						{
							//line 359 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g17 = 0;
							//line 359 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int _g8 = evalues3.length;
							//line 359 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							while (( _g17 < _g8 ))
							{
								//line 359 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								int i5 = _g17++;
								//line 360 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path6, "")) ? (( ( "iterable[" + i5 ) + "]" )) : (( ( ( path6 + "[" ) + i5 ) + "]" )) ));
								//line 361 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								if ( ! (utest.Assert.sameAs(evalues3.__get(i5), vvalues3.__get(i5), status, approx)) ) 
								{
									//line 362 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
									return false;
								}
								
							}
							
						}
						
					}
					
					//line 365 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return true;
				}
				
				//line 369 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
				{
					//line 370 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.root.Array<java.lang.String> fields1 = haxe.root.Type.getInstanceFields(((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (expected) ))) ));
					//line 371 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					java.lang.String path7 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 372 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					{
						//line 372 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						int _g9 = 0;
						//line 372 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						while (( _g9 < fields1.length ))
						{
							//line 372 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.String field1 = fields1.__get(_g9);
							//line 372 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							 ++ _g9;
							//line 373 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path7, "")) ? (field1) : (( ( path7 + "." ) + field1 )) ));
							//line 374 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.Object e1 = haxe.root.Reflect.field(expected, field1);
							//line 375 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if (haxe.root.Reflect.isFunction(e1)) 
							{
								//line 375 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								continue;
							}
							
							//line 376 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.Object v1 = haxe.root.Reflect.field(value, field1);
							//line 377 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if ( ! (utest.Assert.sameAs(e1, v1, status, approx)) ) 
							{
								//line 378 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 382 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return true;
			}
			
			
			case 7:
			{
				//line 383 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.Class e2 = ((java.lang.Class) (_g.params[0]) );
				//line 384 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.String eexpected = haxe.root.Type.getEnumName(e2);
				//line 385 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.String evalue = haxe.root.Type.getEnumName(haxe.root.Type.getEnum(value));
				//line 386 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if ( ! (haxe.lang.Runtime.valEq(eexpected, evalue)) ) 
				{
					//line 388 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected enumeration of " + utest.Assert.q(eexpected) ) + " but it is " ) + utest.Assert.q(evalue) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
					//line 389 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return false;
				}
				
				//line 391 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(status, "recursive", true)) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) )) )) 
				{
					//line 393 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( haxe.root.Type.enumIndex(expected) != haxe.root.Type.enumIndex(value) )) 
					{
						//line 395 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						haxe.lang.Runtime.setField(status, "error", ( ( ( ( "expected enum constructor " + utest.Assert.q(haxe.root.Type.enumConstructor(expected)) ) + " but it is " ) + utest.Assert.q(haxe.root.Type.enumConstructor(value)) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ));
						//line 396 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						return false;
					}
					
					//line 398 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.root.Array eparams = haxe.root.Type.enumParameters(expected);
					//line 399 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					haxe.root.Array vparams = haxe.root.Type.enumParameters(value);
					//line 400 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					java.lang.String path8 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true));
					//line 401 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					{
						//line 401 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						int _g18 = 0;
						//line 401 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						int _g10 = eparams.length;
						//line 401 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						while (( _g18 < _g10 ))
						{
							//line 401 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							int i6 = _g18++;
							//line 403 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							haxe.lang.Runtime.setField(status, "path", ( (haxe.lang.Runtime.valEq(path8, "")) ? (( ( "enum[" + i6 ) + "]" )) : (( ( ( path8 + "[" ) + i6 ) + "]" )) ));
							//line 404 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if ( ! (utest.Assert.sameAs(eparams.__get(i6), vparams.__get(i6), status, approx)) ) 
							{
								//line 406 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								haxe.lang.Runtime.setField(status, "error", ( ( ( ( ( ( "expected enum param " + utest.Assert.q(expected) ) + " but it is " ) + utest.Assert.q(value) ) + (( (haxe.lang.Runtime.valEq(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)), "")) ? ("") : (( " for field " + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "path", true)) )) )) ) + " with " ) + haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "error", true)) ));
								//line 407 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								return false;
							}
							
						}
						
					}
					
				}
				
				//line 411 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				return true;
			}
			
			
			case 8:
			{
				//line 489 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				throw haxe.lang.HaxeException.wrap("Unable to compare two unknown types");
			}
			
			
		}
		
		//line 202 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		return false;
	}
	
	
	public static java.lang.String q(java.lang.Object v)
	{
		//line 496 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( v instanceof java.lang.String )) 
		{
			//line 497 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return ( ( "\"" + haxe.root.StringTools.replace(haxe.lang.Runtime.toString(v), "\"", "\\\"") ) + "\"" );
		}
		else
		{
			//line 499 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return haxe.root.Std.string(v);
		}
		
	}
	
	
	public static void same(java.lang.Object expected, java.lang.Object value, java.lang.Object recursive, java.lang.String msg, java.lang.Object approx, java.lang.Object pos)
	{
		//line 518 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (haxe.lang.Runtime.eq(null, approx)) 
		{
			//line 519 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			approx = 1e-5;
		}
		
		//line 520 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		java.lang.Object status = null;
		//line 520 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		{
			//line 520 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			java.lang.Object __temp_odecl1 = ( (haxe.lang.Runtime.eq(null, recursive)) ? (true) : (recursive) );
			//line 520 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			status = new haxe.lang.DynamicObject(new java.lang.String[]{"error", "path", "recursive"}, new java.lang.Object[]{null, "", __temp_odecl1}, new java.lang.String[]{}, new double[]{});
		}
		
		//line 521 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (utest.Assert.sameAs(expected, value, status, ((double) (haxe.lang.Runtime.toDouble(approx)) ))) 
		{
			//line 522 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.pass(msg, pos);
		}
		else
		{
			//line 524 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(status, "error", true))) : (msg) ), pos);
		}
		
	}
	
	
	public static void raises(haxe.lang.Function method, java.lang.Class type, java.lang.String msgNotThrown, java.lang.String msgWrongType, java.lang.Object pos)
	{
		//line 545 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		java.lang.String name = ( (( ((java.lang.Object) (type) ) != ((java.lang.Object) (null) ) )) ? (haxe.root.Type.getClassName(type)) : ("Dynamic") );
		//line 546 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 547 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			method.__hx_invoke0_o();
			//line 548 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			if (( null == msgNotThrown )) 
			{
				//line 549 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				msgNotThrown = ( ( "exception of type " + name ) + " not raised" );
			}
			
			//line 550 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(msgNotThrown, pos);
		}
		catch (java.lang.Throwable catchallException)
		{
			//line 546 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException);
			//line 552 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			java.lang.Object realException = ( (( catchallException instanceof haxe.lang.HaxeException )) ? (((haxe.lang.HaxeException) (catchallException) ).obj) : (catchallException) );
			//line 552 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			{
				//line 552 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.Object ex = realException;
				//line 552 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( ((java.lang.Object) (null) ) == ((java.lang.Object) (type) ) )) 
				{
					//line 553 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					utest.Assert.pass(null, pos);
				}
				else
				{
					//line 555 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( null == msgWrongType )) 
					{
						//line 556 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						msgWrongType = ( ( ( "expected throw of type " + name ) + " but it is " ) + haxe.root.Std.string(ex) );
					}
					
					//line 557 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					utest.Assert.isTrue(haxe.root.Std.is(ex, type), msgWrongType, pos);
				}
				
			}
			
		}
		
		
	}
	
	
	public static <T> void allows(haxe.root.Array<T> possibilities, T value, java.lang.String msg, java.lang.Object pos)
	{
		//line 571 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (possibilities) ), ((T) (value) ))) ))) 
		{
			//line 572 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 574 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "value " + utest.Assert.q(value) ) + " not found in the expected possibilities " ) + haxe.root.Std.string(possibilities) )) : (msg) ), pos);
		}
		
	}
	
	
	public static <T> void contains(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 587 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (values) ), ((T) (match) ))) ))) 
		{
			//line 588 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 590 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "values " + utest.Assert.q(values) ) + " do not contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static <T> void notContains(T match, haxe.root.Array<T> values, java.lang.String msg, java.lang.Object pos)
	{
		//line 603 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if ( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.root.Lambda.has(((java.lang.Object) (values) ), ((T) (match) ))) ))) ) 
		{
			//line 604 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 606 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "values " + utest.Assert.q(values) ) + " do contain " ) + haxe.root.Std.string(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void stringContains(java.lang.String match, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 618 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( ( value != null ) && ( haxe.lang.StringExt.indexOf(value, match, null) >= 0 ) )) 
		{
			//line 619 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.isTrue(true, msg, pos);
		}
		else
		{
			//line 621 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? (( ( ( "value " + utest.Assert.q(value) ) + " does not contain " ) + utest.Assert.q(match) )) : (msg) ), pos);
		}
		
	}
	
	
	public static void stringSequence(haxe.root.Array<java.lang.String> sequence, java.lang.String value, java.lang.String msg, java.lang.Object pos)
	{
		//line 634 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( null == value )) 
		{
			//line 636 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			utest.Assert.fail(( (( msg == null )) ? ("null argument value") : (msg) ), pos);
			//line 637 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return ;
		}
		
		//line 639 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		int p = 0;
		//line 640 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		{
			//line 640 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			int _g = 0;
			//line 640 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			while (( _g < sequence.length ))
			{
				//line 640 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				java.lang.String s = sequence.__get(_g);
				//line 640 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				 ++ _g;
				//line 642 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				int p2 = haxe.lang.StringExt.indexOf(value, s, p);
				//line 643 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				if (( p2 < 0 )) 
				{
					//line 645 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					if (( msg == null )) 
					{
						//line 647 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						msg = ( ( "expected \'" + s ) + "\' after " );
						//line 648 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
						if (( p > 0 )) 
						{
							//line 650 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							java.lang.String cut = haxe.lang.StringExt.substr(value, 0, p);
							//line 651 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							if (( cut.length() > 30 )) 
							{
								//line 652 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
								cut = ( "..." + haxe.lang.StringExt.substr(cut, -27, null) );
							}
							
							//line 653 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							msg += ( ( " \'" + cut ) + "\'" );
						}
						else
						{
							//line 655 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
							msg += " begin";
						}
						
					}
					
					//line 657 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					utest.Assert.fail(msg, pos);
					//line 658 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
					return ;
				}
				
				//line 660 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				p = ( p2 + s.length() );
			}
			
		}
		
		//line 662 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(true, msg, pos);
	}
	
	
	public static void pass(java.lang.String msg, java.lang.Object pos)
	{
		//line 672 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 672 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = "pass expected";
		}
		
		//line 672 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(true, msg, pos);
	}
	
	
	public static void fail(java.lang.String msg, java.lang.Object pos)
	{
		//line 682 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		if (( msg == null )) 
		{
			//line 682 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			msg = "failure expected";
		}
		
		//line 682 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.isTrue(false, msg, pos);
	}
	
	
	public static void warn(java.lang.String msg)
	{
		//line 692 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		utest.Assert.results.add(utest.Assertation.Warning(msg));
	}
	
	
	public static haxe.lang.Function createAsync;
	
	public static haxe.lang.Function createEvent;
	
	public static java.lang.String typeToString(java.lang.Object t)
	{
		//line 723 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 724 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			java.lang.Class _t = ((java.lang.Class) (haxe.root.Type.getClass(((java.lang.Object) (t) ))) );
			//line 725 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			if (( ((java.lang.Object) (_t) ) != ((java.lang.Object) (null) ) )) 
			{
				//line 726 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				t = _t;
			}
			
		}
		catch (java.lang.Throwable catchallException)
		{
			//line 723 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException);
		}
		
		
		//line 728 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 728 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return haxe.root.Type.getClassName(((java.lang.Class) (t) ));
		}
		catch (java.lang.Throwable catchallException1)
		{
			//line 728 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException1);
		}
		
		
		//line 729 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 730 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			java.lang.Class _t1 = haxe.root.Type.getEnum(t);
			//line 731 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			if (( ((java.lang.Object) (_t1) ) != ((java.lang.Object) (null) ) )) 
			{
				//line 732 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
				t = _t1;
			}
			
		}
		catch (java.lang.Throwable catchallException2)
		{
			//line 729 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException2);
		}
		
		
		//line 734 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 734 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return haxe.root.Type.getEnumName(((java.lang.Class) (t) ));
		}
		catch (java.lang.Throwable catchallException3)
		{
			//line 734 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException3);
		}
		
		
		//line 735 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 735 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return haxe.root.Std.string(haxe.root.Type.typeof(t));
		}
		catch (java.lang.Throwable catchallException4)
		{
			//line 735 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException4);
		}
		
		
		//line 736 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		try 
		{
			//line 736 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			return haxe.root.Std.string(t);
		}
		catch (java.lang.Throwable catchallException5)
		{
			//line 736 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
			haxe.lang.Exceptions.setException(catchallException5);
		}
		
		
		//line 737 "C:\\Users\\VEgorov\\haxelib\\utest\\1,8,4\\src\\utest\\Assert.hx"
		return "<unable to retrieve type name>";
	}
	
	
}


