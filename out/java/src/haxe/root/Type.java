// Generated by Haxe 4.0.0-preview.4+1e3e5e016
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Type extends haxe.lang.HxObject
{
	public Type(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Type()
	{
		//line 39 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		haxe.root.Type.__hx_ctor__Type(this);
	}
	
	
	protected static void __hx_ctor__Type(haxe.root.Type __hx_this)
	{
	}
	
	
	public static <T> java.lang.Class getClass(T o)
	{
		//line 43 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (( ( ( o == null ) || ( o instanceof haxe.lang.DynamicObject ) ) || ( o instanceof java.lang.Class ) )) 
		{
			//line 44 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return null;
		}
		
		//line 46 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return ((java.lang.Class) (((java.lang.Class) (((java.lang.Class) (o.getClass()) )) )) );
	}
	
	
	public static java.lang.Class getEnum(java.lang.Object o)
	{
		//line 51 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (( ( o instanceof java.lang.Enum ) || ( o instanceof haxe.lang.Enum ) )) 
		{
			//line 52 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return o.getClass();
		}
		
		//line 54 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return null;
	}
	
	
	public static java.lang.String getClassName(java.lang.Class c)
	{
		//line 68 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.Class c1 = ((java.lang.Class) (c) );
		//line 69 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.String name = c1.getName();
		//line 70 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (name.startsWith("haxe.root.")) 
		{
			//line 71 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 72 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (name.startsWith("java.lang")) 
		{
			//line 73 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			name = haxe.lang.StringExt.substr(name, 10, null);
		}
		
		//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		{
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			java.lang.String __temp_svar1 = (name);
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			int __temp_hash3 = __temp_svar1.hashCode();
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			boolean __temp_executeDef2 = true;
			//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			switch (__temp_hash3)
			{
				case -1325958191:
				case 2052876273:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (( (( ( __temp_hash3 == -1325958191 ) && __temp_svar1.equals("double") )) || __temp_svar1.equals("Double") )) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 78 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Float";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
				case -1939501217:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (__temp_svar1.equals("Object")) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 79 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Dynamic";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
				case 104431:
				case -672261858:
				{
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					if (( (( ( __temp_hash3 == 104431 ) && __temp_svar1.equals("int") )) || __temp_svar1.equals("Integer") )) 
					{
						//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						__temp_executeDef2 = false;
						//line 77 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						return "Int";
					}
					
					//line 75 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					break;
				}
				
				
			}
			
			//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (__temp_executeDef2) 
			{
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				return name;
			}
			else
			{
				//line 80 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				throw null;
			}
			
		}
		
	}
	
	
	public static java.lang.String getEnumName(java.lang.Class e)
	{
		//line 85 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.Class c = ((java.lang.Class) (e) );
		//line 86 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		java.lang.String ret = c.getName();
		//line 87 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		if (ret.startsWith("haxe.root.")) 
		{
			//line 88 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return haxe.lang.StringExt.substr(ret, 10, null);
		}
		
		//line 90 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		return ret;
	}
	
	
	public static java.lang.Class resolveClass(java.lang.String name)
	{
		//line 95 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
		try 
		{
			//line 96 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			if (( haxe.lang.StringExt.indexOf(name, ".", null) == -1 )) 
			{
				//line 97 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				name = ( "haxe.root." + name );
			}
			
			//line 99 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			return ((java.lang.Class) (java.lang.Class.forName(haxe.lang.Runtime.toString(name))) );
		}
		catch (java.lang.ClassNotFoundException e)
		{
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			haxe.lang.Exceptions.setException(e);
			//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
			{
				//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				java.lang.String __temp_svar1 = (name);
				//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				boolean __temp_executeDef2 = true;
				//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				switch (__temp_svar1.hashCode())
				{
					case 360541844:
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Class")) 
						{
							//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 106 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.Class.class;
						}
						
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1242153355:
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.String")) 
						{
							//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 104 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.String.class;
						}
						
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -140489125:
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Dynamic")) 
						{
							//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 107 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.Object.class;
						}
						
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 704654956:
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Math")) 
						{
							//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 105 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return java.lang.Math.class;
						}
						
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case 363325304:
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Float")) 
						{
							//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 103 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return double.class;
						}
						
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
					case -1778387957:
					{
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						if (__temp_svar1.equals("haxe.root.Int")) 
						{
							//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							__temp_executeDef2 = false;
							//line 102 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
							return int.class;
						}
						
						//line 101 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
						break;
					}
					
					
				}
				
				//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
				if (__temp_executeDef2) 
				{
					//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					return null;
				}
				else
				{
					//line 108 "C:\\HaxeToolkit\\haxe\\std\\java\\_std\\Type.hx"
					throw null;
				}
				
			}
			
		}
		
		
	}
	
	
	public static haxe.root.Array<java.lang.String> getInstanceFields(java.lang.Class c)
	{
		
		if (c == java.lang.String.class)
		{
			return haxe.lang.StringRefl.fields;
		}

		Array<String> ret = new Array<String>();
		for (java.lang.reflect.Field f : c.getFields())
		{
			java.lang.String fname = f.getName();
			if (!java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith("__hx_"))
				ret.push(fname);
		}

		for (java.lang.reflect.Method m : c.getMethods())
		{
			if (m.getDeclaringClass() == java.lang.Object.class)
				continue;
			java.lang.String mname = m.getName();
			if (!java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith("__hx_"))
				ret.push(mname);
		}

		return ret;
	
	}
	
	
	public static haxe.root.Array<java.lang.String> getClassFields(java.lang.Class c)
	{
		
		Array<String> ret = new Array<String>();
		if (c == java.lang.String.class)
		{
			ret.push("fromCharCode");
			return ret;
		}

		for (java.lang.reflect.Field f : c.getDeclaredFields())
		{
			java.lang.String fname = f.getName();
			if (java.lang.reflect.Modifier.isStatic(f.getModifiers()) && !fname.startsWith("__hx_"))
			ret.push(fname);
		}

		for (java.lang.reflect.Method m : c.getDeclaredMethods())
		{
			if (m.getDeclaringClass() == java.lang.Object.class)
				continue;
			java.lang.String mname = m.getName();
			if (java.lang.reflect.Modifier.isStatic(m.getModifiers()) && !mname.startsWith("__hx_"))
				ret.push(mname);
		}

		return ret;
	
	}
	
	
	public static haxe.root.ValueType typeof(java.lang.Object v)
	{
		
		if (v == null) return ValueType.TNull;

		if (v instanceof haxe.lang.IHxObject) {
			haxe.lang.IHxObject vobj = (haxe.lang.IHxObject) v;
			java.lang.Class cl = vobj.getClass();
			if (v instanceof haxe.lang.DynamicObject)
				return ValueType.TObject;
			else
				return ValueType.TClass(cl);
		} else if (v instanceof java.lang.Number) {
			java.lang.Number n = (java.lang.Number) v;
			if (n.intValue() == n.doubleValue())
				return ValueType.TInt;
			else
				return ValueType.TFloat;
		} else if (v instanceof haxe.lang.Function) {
			return ValueType.TFunction;
		} else if (v instanceof java.lang.Enum || v instanceof haxe.lang.Enum) {
			return ValueType.TEnum(v.getClass());
		} else if (v instanceof java.lang.Boolean) {
			return ValueType.TBool;
		} else if (v instanceof java.lang.Class) {
			return ValueType.TObject;
		} else {
			return ValueType.TClass(v.getClass());
		}
	
	}
	
	
	public static <T> boolean enumEq(T a, T b)
	{
		
			if (a instanceof haxe.lang.Enum)
				return a.equals(b);
			else
				return haxe.lang.Runtime.eq(a, b);
	
	}
	
	
	public static java.lang.String enumConstructor(java.lang.Object e)
	{
		
		if (e instanceof java.lang.Enum)
			return ((java.lang.Enum) e).name();
		else
			return ((haxe.lang.Enum) e).getTag();
	
	}
	
	
	public static haxe.root.Array enumParameters(java.lang.Object e)
	{
		
		return ( e instanceof java.lang.Enum ) ? new haxe.root.Array() : ((haxe.lang.Enum) e).getParams();
	
	}
	
	
	public static int enumIndex(java.lang.Object e)
	{
		
		if (e instanceof java.lang.Enum)
			return ((java.lang.Enum) e).ordinal();
		else
			return ((haxe.lang.Enum) e).index;
	
	}
	
	
}


